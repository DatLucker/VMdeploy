---

- name: Check that the /var/www/html exists
  stat:
    path: /var/www/html
  register: stat_result_html

- name: Создание директории /var/www/html
  shell: 
    cmd: mkdir html 
    chdir: /var/www/
  when: not stat_result_html.stat.exists

- name: Check that the /var/www/static exists
  stat:
    path: /var/www/static
  register: stat_result_static

- name: Создание директории /var/www/static
  shell: 
    cmd: mkdir static
    chdir: /var/www/
  when: not stat_result_static.stat.exists

- name: Check that the /var/www/media exists
  stat:
    path: /var/www/media
  register: stat_result_media

- name: Создание директории /var/www/media
  shell: 
    cmd: mkdir media
    chdir: /var/www/
  when: not stat_result_media.stat.exists

- name: Check that the /var/www/SGAR exists
  stat:
    path: /var/www/SGAR
  register: stat_result_SGAR

- name: Создание директории /var/www/SGAR
  shell: 
    cmd: mkdir SGARS
    chdir: /var/www/
  when: not stat_result_SGAR.stat.exists

- name: "Install packages"
  apt: 
    name: "{{ item }}"
  loop:
    - postgresql
    - postgresql-server
    - redis-server
    - python3-psycopg2

- name: "Find out if PostgreSQL is initialized"
  ansible.builtin.stat:
    path: "/var/lib/pgsql/data/pg_hba.conf"
  register: postgres_data

- name: block
  become: yes
  become_user: postgres
  block:
  - name: "Create app database"
    postgresql_db:
      state: present
      name: "{{ db_name }}"

  - name: Create db user
    postgresql_user:
      state: present
      name: "{{ db_user }}"
      password: "{{ db_password }}"

  - name: Grant db user access to app db
    postgresql_privs:
      type: database
      database: "{{ db_name }}"
      roles: "{{ db_user }}"
      grant_option: no
      privs: all
  when: not postgres_data.stat.exists

- name: "Start and enable services"
  service: "name={{ item }} state=started enabled=yes"
  with_items:
    - postgresql


  

...